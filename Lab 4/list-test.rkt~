<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
pre { line-height: 125%; }
body .hll { background-color: #ffffcc }
body  { background: #f8f8f8; }
body .c { color: #408080; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #008000; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .cm { color: #408080; font-style: italic } /* Comment.Multiline */
body .cp { color: #BC7A00 } /* Comment.Preproc */
body .c1 { color: #408080; font-style: italic } /* Comment.Single */
body .cs { color: #408080; font-style: italic } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
body .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #008000 } /* Keyword.Pseudo */
body .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #B00040 } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BA2121 } /* Literal.String */
body .na { color: #7D9029 } /* Name.Attribute */
body .nb { color: #008000 } /* Name.Builtin */
body .nc { color: #0000FF; font-weight: bold } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #0000FF } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #19177C } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sb { color: #BA2121 } /* Literal.String.Backtick */
body .sc { color: #BA2121 } /* Literal.String.Char */
body .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BA2121 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BA2121 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BA2121 } /* Literal.String.Single */
body .ss { color: #19177C } /* Literal.String.Symbol */
body .bp { color: #008000 } /* Name.Builtin.Pseudo */
body .vc { color: #19177C } /* Name.Variable.Class */
body .vg { color: #19177C } /* Name.Variable.Global */
body .vi { color: #19177C } /* Name.Variable.Instance */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </style>
</head>
<body>
<h2></h2>

<div class="highlight"><pre><span class="kn">#lang racket</span>

<span class="p">(</span><span class="k">require </span><span class="s">&quot;list.rkt&quot;</span><span class="p">)</span>

<span class="c1">;;;;;;;;;;;;;;;;;;</span>
<span class="c1">;; Changes 19 sept 2015 by Alex Loiko:</span>
<span class="c1">;;    * renamed &quot;*.scm&quot; -&gt; &quot;*.rkt&quot;, added &quot;#lang racket&quot;</span>
<span class="c1">;;    * modularized tests into list-tests.rkt</span>
<span class="c1">;;    * added short automated tests for all assignments. In particular:</span>
<span class="c1">;;          - (list-ops-auto-test)</span>

<span class="c1">;;;;;;;;;;</span>
<span class="c1">;; Test of list functions (supplied by course team)</span>

<span class="c1">;; list-test -- run list test with an (initially) empty list</span>
<span class="p">(</span><span class="k">define </span><span class="nv">list-test</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
    <span class="p">(</span><span class="nf">list-edit</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">))))</span>

<span class="c1">;; list-edit -- interactively test list manipulation functions</span>
<span class="p">(</span><span class="k">define </span><span class="nv">list-edit</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lst</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Edit operation (insert/delete/print/nth/first/rest/end): &quot;</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">oper</span> <span class="p">(</span><span class="nf">read</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;insert</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;i</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="p">(</span><span class="nf">read-element</span> <span class="s">&quot;Element to insert: &quot;</span><span class="p">)</span>
                                     <span class="nv">lst</span><span class="p">)))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;delete</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;d</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="p">(</span><span class="nf">list-delete</span> <span class="p">(</span><span class="nf">read-element</span> <span class="s">&quot;Element to delete: &quot;</span><span class="p">)</span>
                                     <span class="nv">lst</span><span class="p">)))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;nth</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;n</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">elem-print</span> <span class="p">(</span><span class="nf">list-nth</span> <span class="p">(</span><span class="nf">read-element</span> <span class="s">&quot;Element number: &quot;</span><span class="p">)</span>
                                   <span class="nv">lst</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="nv">lst</span><span class="p">))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;print</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;p</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">list-print</span> <span class="nv">lst</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="nv">lst</span><span class="p">))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;rest</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;r</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">list-print</span> <span class="p">(</span><span class="nf">list-rest</span> <span class="nv">lst</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="nv">lst</span><span class="p">))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;first</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;f</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">elem-print</span> <span class="p">(</span><span class="nf">list-first</span> <span class="nv">lst</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">list-edit</span> <span class="nv">lst</span><span class="p">))</span>
            <span class="p">((</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;end</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">eq? </span><span class="nv">oper</span> <span class="ss">&#39;e</span><span class="p">))</span> <span class="nv">lst</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">else</span> <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Unknown operation&quot;</span><span class="p">)</span>
                  <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
                  <span class="p">(</span><span class="nf">list-edit</span> <span class="nv">lst</span><span class="p">))))))</span>

<span class="c1">;; Uses the interface in &quot;list.rkt&quot; to convert the list</span>
<span class="c1">;; from your representation to ordinary Scheme lists</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">your-list-to-scm-list</span> <span class="nv">your-list</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">list-empty?</span> <span class="nv">your-list</span><span class="p">)</span>
      <span class="o">&#39;</span><span class="p">()</span>
      <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">list-first</span> <span class="nv">your-list</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">your-list-to-scm-list</span> <span class="p">(</span><span class="nf">list-rest</span> <span class="nv">your-list</span><span class="p">)))</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">run-tests</span> <span class="nv">test-name</span> <span class="nv">err-actual-expected-lst</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">curry</span> <span class="nv">apply</span>
        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">msg</span> <span class="nv">your-answer</span> <span class="nv">expected</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="nv">test-name</span> <span class="nv">msg</span> <span class="p">(</span><span class="nf">your-list-to-scm-list</span> <span class="nv">your-answer</span><span class="p">)</span> <span class="nv">expected</span><span class="p">)</span>
          <span class="p">))</span>
       <span class="nv">err-actual-expected-lst</span> <span class="p">)</span>
  <span class="p">(</span><span class="nb">displayln </span><span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a: All tests OK&quot;</span> <span class="nv">test-name</span><span class="p">)))</span>
  
  
       
<span class="c1">;; Automated test function. Tests whether list operations work correctly.</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">list-ops-auto-test</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">new-list</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">))</span>      <span class="c1">;; define actual/expected answer pairs</span>
         <span class="p">(</span><span class="nf">singleton-42-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">42</span> <span class="nv">new-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">two-el-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">0</span> <span class="nv">singleton-42-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">three-el-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">42</span> <span class="nv">two-el-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">four-el-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">1</span> <span class="nv">three-el-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">remove-42-list</span> <span class="p">(</span><span class="nf">list-delete</span> <span class="mi">42</span> <span class="nv">four-el-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">insert-len-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="p">(</span><span class="nf">list-len</span> <span class="nv">four-el-list</span><span class="p">)</span> <span class="nv">remove-42-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">insert-len-len-list</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="p">(</span><span class="nf">list-len</span> <span class="nv">new-list</span><span class="p">)</span> <span class="nv">insert-len-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">singleton-nth-1</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="p">(</span><span class="nf">list-nth</span> <span class="mi">1</span> <span class="nv">singleton-42-list</span><span class="p">)</span> <span class="nv">insert-len-len-list</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">list-nth-5</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="p">(</span><span class="nf">list-nth</span> <span class="mi">4</span> <span class="nv">singleton-nth-1</span><span class="p">)</span> <span class="nv">singleton-nth-1</span><span class="p">))</span>
         <span class="p">)</span>

    <span class="p">(</span><span class="nf">run-tests</span>
     <span class="ss">&#39;list-ops-auto-test</span>
     <span class="p">(</span><span class="nb">list </span>                   <span class="c1">;; each element has the format (&quot;info error message&quot; actual expected)</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;list-create should produce empty list&quot;</span> <span class="nv">new-list</span> <span class="o">&#39;</span><span class="p">())</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;single insert should produce singleton&quot;</span> <span class="nv">singleton-42-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;list-first should return last inserted &quot;</span> <span class="nv">two-el-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">42</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;list-delete should remove all occurances and not reverse the list&quot;</span> <span class="nv">remove-42-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;4-element lists should have length 4&quot;</span> <span class="nv">insert-len-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;0-element lists should have length 0&quot;</span> <span class="nv">insert-len-len-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;list-nth is 1-indexed and works on singleton lists&quot;</span> <span class="nv">singleton-nth-1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">42</span> <span class="mi">0</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">list </span><span class="s">&quot;list-nth is 1-indexed and works on 4:th elements of length-5 lists&quot;</span> <span class="nv">list-nth-5</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">42</span> <span class="mi">0</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">)</span>
     <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>


<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">do-to-each-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">run-tests</span>
   <span class="ss">&#39;do-to-each-test</span>
   <span class="p">(</span><span class="nf">list</span>
    <span class="p">(</span><span class="nb">list </span><span class="s">&quot;map of 0-element list&quot;</span> <span class="p">((</span><span class="nf">do-to-each-proc</span> <span class="p">(</span><span class="nf">curry</span> <span class="nv">+</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())</span>
    <span class="p">(</span><span class="nb">list </span><span class="s">&quot;map of 1-element list&quot;</span> <span class="p">((</span><span class="nf">do-to-each-proc</span> <span class="p">(</span><span class="nf">curry</span> <span class="nv">+</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
    <span class="p">))</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">accumulate-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">run-tests</span>
   <span class="ss">&#39;accumulate-test</span>
   <span class="p">(</span><span class="nf">list</span>
    <span class="p">(</span><span class="nb">list </span><span class="s">&quot;accumulate of 1-element list (should return that single element)&quot;</span>
          <span class="p">(</span><span class="nf">list-insert</span>
           <span class="p">((</span><span class="nf">accumulate-proc</span> <span class="nv">+</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">)))</span>
           <span class="p">(</span><span class="nf">list-create</span><span class="p">)</span>
           <span class="p">)</span>
          <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
          <span class="p">)</span>
    <span class="p">(</span><span class="nb">list </span><span class="s">&quot;accumulate of 2-element list, correct order of arguments to proc&quot;</span>
          <span class="p">(</span><span class="nf">list-insert</span>
           <span class="p">((</span><span class="nf">accumulate-proc</span> <span class="nv">cons</span> <span class="nv">null</span><span class="p">)</span> <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">2</span>
                                              <span class="p">(</span><span class="nf">list-insert</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">list-create</span><span class="p">))))</span>
           <span class="p">(</span><span class="nf">list-create</span><span class="p">)</span>
           <span class="p">)</span>
          <span class="o">&#39;</span><span class="p">((</span><span class="mi">2</span> <span class="mi">1</span><span class="p">))</span>
          <span class="p">)</span>
    <span class="p">)</span>
   <span class="p">)</span>
  
  <span class="p">(</span><span class="nb">void </span><span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">add-n-test</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">(</span> <span class="p">(</span><span class="nf">actual</span> <span class="p">(</span><span class="nb">map </span><span class="nv">add-n</span> <span class="p">(</span><span class="nb">list </span><span class="mi">-42</span> <span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">17511751</span> <span class="p">)))</span>
         <span class="p">(</span><span class="nf">expected</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">curry</span> <span class="nv">+</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="mi">-42</span> <span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">17511751</span> <span class="p">)))</span>
         <span class="p">)</span>
    <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="ss">&#39;add-n-test</span> <span class="s">&quot;(add-n k) should produce a procedure that adds k to its input&quot;</span>
                           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="mf">17511705.5</span><span class="p">))</span> <span class="nv">actual</span><span class="p">)</span>
                           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="mf">17511705.5</span><span class="p">))</span> <span class="nv">expected</span><span class="p">)</span>
                           <span class="p">)</span>
    <span class="p">(</span><span class="nb">displayln </span><span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a: All tests OK&quot;</span> <span class="ss">&#39;add-n-test</span><span class="p">))</span>
    <span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">even-odd-test</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">(</span> <span class="p">(</span><span class="nf">simple-fkn</span> <span class="p">(</span><span class="nf">even-odd</span> <span class="p">(</span><span class="nf">const</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nf">const</span> <span class="ss">&#39;hej</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">less-simple-fkn</span> <span class="p">(</span><span class="nf">even-odd</span> <span class="nv">sqr</span> <span class="nv">sqrt</span><span class="p">))</span>
         <span class="p">)</span>
    <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="ss">&#39;add-n-test</span> <span class="s">&quot;even-odd should work with simple fkns that don&#39;t care about input&quot;</span>
                           <span class="p">(</span><span class="nb">map </span><span class="nv">simple-fkn</span> <span class="p">(</span><span class="nb">list </span><span class="mi">-3</span> <span class="mi">-2</span> <span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;hej</span> <span class="mi">10</span> <span class="ss">&#39;hej</span>  <span class="mi">10</span> <span class="ss">&#39;hej</span> <span class="mi">10</span> <span class="ss">&#39;hej</span><span class="p">)</span>
                           <span class="p">)</span>
    <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="ss">&#39;add-n-test</span> <span class="s">&quot;even-odd should work with any functions&quot;</span>
                           <span class="p">(</span><span class="nb">map </span><span class="nv">less-simple-fkn</span> <span class="p">(</span><span class="nb">list </span><span class="mi">-4</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">sqr</span> <span class="mi">-4</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">sqrt </span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">sqrt </span><span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">)</span>
    <span class="p">(</span><span class="nb">displayln </span><span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a: All tests OK&quot;</span> <span class="ss">&#39;even-odd-test</span><span class="p">))</span>
    <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">choose-test</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">(</span> <span class="p">(</span><span class="nf">simple-fkn</span> <span class="p">(</span><span class="nf">choose</span> <span class="nv">even?</span> <span class="p">(</span><span class="nf">const</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nf">const</span> <span class="ss">&#39;hej</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">less-simple-fkn</span> <span class="p">(</span><span class="nf">choose</span> <span class="nv">list?</span> <span class="nv">length</span> <span class="nv">sqr</span><span class="p">))</span>
         <span class="p">)</span>
    <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="ss">&#39;add-n-test</span> <span class="s">&quot;choose should work with simple fkns that don&#39;t care about input&quot;</span>
                           <span class="p">(</span><span class="nb">map </span><span class="nv">simple-fkn</span> <span class="p">(</span><span class="nb">list </span><span class="mi">-3</span> <span class="mi">-2</span> <span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;hej</span> <span class="mi">10</span> <span class="ss">&#39;hej</span>  <span class="mi">10</span> <span class="ss">&#39;hej</span> <span class="mi">10</span> <span class="ss">&#39;hej</span><span class="p">)</span>
                           <span class="p">)</span>
    <span class="p">(</span><span class="nf">check-actual-expected</span> <span class="ss">&#39;add-n-test</span> <span class="s">&quot;choose should work with any functions&quot;</span>
                           <span class="p">(</span><span class="nb">map </span><span class="nv">less-simple-fkn</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="mi">3</span> <span class="mi">4</span><span class="p">)</span> <span class="mi">-4</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">(</span><span class="nb">list </span><span class="mi">2</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">-4</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqr</span> <span class="mi">3333333333</span><span class="p">))</span>
                           <span class="p">)</span>
    <span class="p">(</span><span class="nb">displayln </span><span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a: All tests OK&quot;</span> <span class="ss">&#39;choose-test</span><span class="p">))</span>
    <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">all-tests</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">list-ops-auto-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">do-to-each-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">accumulate-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">add-n-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">even-odd-test</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">choose-test</span><span class="p">)</span>
  <span class="p">)</span>


<span class="c1">;; compares actual with expected and prints error information</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">check-actual-expected</span> <span class="nv">err-symbol</span> <span class="nv">err-info</span> <span class="nv">actual</span> <span class="nv">expected</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="nv">actual</span> <span class="nv">expected</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">void</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">error </span><span class="nv">err-symbol</span> <span class="s">&quot;~a\ngot ~a, expected ~a&quot;</span> <span class="nv">err-info</span> <span class="nv">actual</span> <span class="nv">expected</span><span class="p">)</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="c1">;; read-element -- prompt the user with the given string, then</span>
<span class="c1">;; return the answer</span>
<span class="p">(</span><span class="k">define </span><span class="nv">read-element</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">operation</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">display </span><span class="nv">operation</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">read</span><span class="p">)))</span>

<span class="c1">;; list-print -- print each element in the given list, separated</span>
<span class="c1">;; by &quot; &quot;</span>
<span class="p">(</span><span class="k">define </span><span class="nv">list-print</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lst</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">list-empty?</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
          <span class="p">(</span><span class="nf">else</span> <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nf">list-first</span> <span class="nv">lst</span><span class="p">))</span>
                <span class="p">(</span><span class="nb">display </span><span class="s">&quot; &quot;</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">list-print</span> <span class="p">(</span><span class="nf">list-rest</span> <span class="nv">lst</span><span class="p">))))))</span>

<span class="c1">;; elem-print -- print the given element</span>
<span class="p">(</span><span class="k">define </span><span class="nv">elem-print</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elem</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">display </span><span class="nv">elem</span><span class="p">)))</span>
</pre></div>
</body>
</html>
